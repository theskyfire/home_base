##############################################################################
# Stage Template
##############################################################################

STAGE			=$(this)
PRJ			=%
$(this).LOG		=$(tmp)/$(PRJ).$(STAGE).log

# Default Path for this stage, $(x.$(PRJ).PATH) use stage x's values
$(this).PATH		=/

# Override for a given project
$(foreach p,$(prjs),$(eval $(this).$(p).PATH=$$($(this).PATH)))

# Define Prerequisite Variables
$(this).DEP_STAGE	=
$(this).ORDER_STAGE	=$($(STAGE).PATH)
$(foreach p,$(prjs),\
	$(eval $(p).DEP_PRJ=)\
	$(eval $(p).ORDER_PRJ=)\
	$(eval $(this).$(p).DEP=)\
	$(eval $(this).$(p).ORDER=)\
)

# 'stage' will call each 'stage(X)' where X in Projects
.PHONY: $(this)
$(this): $(this)($(prjs))

.SECONDARY: $(this)($(prjs))

# call all prerequisites of stage(prj) then call $(this).LOG to do the work.
$(this)($(prjs)):	STAGE:=$(this)
$(this)($(prjs)):	PRJ=$(or $(%),$(*))
$(this)($(prjs)):	$$($$(PRJ).DEP_PRJ)
$(this)($(prjs)):	$$($$(STAGE).DEP_STAGE)
$(this)($(prjs)):	$$($$(STAGE).$$(PRJ).DEP)
$(this)($(prjs)):	| $$($$(PRJ).ORDER_PRJ)
$(this)($(prjs)):	| $$($$(STAGE).ORDER_STAGE)
$(this)($(prjs)):	| $$($$(STAGE).$$(PRJ).ORDER)
$(this)($(prjs)):	| $$($(this).LOG)
$(this)($(prjs)):	;

##############################################################################
# Create Command Sequence

# CMD_SEQ = CMD_PRE CMD CMD_POST
$(this).CMD_SEQ		 =$($(STAGE).CMD_PRE)
$(this).CMD_SEQ		+=$($(STAGE).CMD)
$(this).CMD_SEQ		+=$($(STAGE).CMD_POST)

define $(this).CMD_PRE =
{
	trap "mv '$($(STAGE).LOG)' '$($(STAGE).LOG).err'" ERR ;
	set -x ;
	cd '$($(STAGE).$(PRJ).PATH)' ;
endef

# CMD = REDIR_PRE ENV_SEQ PROG_SEQ ARG_SEQ REDIR_POST
$(this).REDIR_PRE	 =
$(this).CMD		 =$($(STAGE).REDIR_PRE)
$(this).CMD		+=$($(STAGE).ENV_SEQ)
$(this).CMD		+=$($(STAGE).PROG_SEQ)
$(this).CMD		+=$($(STAGE).ARG_SEQ)
$(this).CMD		+=$($(STAGE).REDIR_POST)
$(this).REDIR_POST	 =

define $(this).CMD_POST =
;
} 2>&1 | tee '$(@)' ; exit $${PIPESTATUS[0]}
endef

$(this).ENV_PRE		 =
$(this).ENV		 =
$(this).ENV_POST	 =
$(this).ENV_SEQ		 =$($(STAGE).ENV_PRE)
$(this).ENV_SEQ		+=$($(STAGE).ENV)
$(this).ENV_SEQ		+=$($(STAGE).ENV_POST)

$(this).PROG_PRE	 =
$(this).PROG		 =$(nop)
$(this).PROG_POST	 =
$(this).PROG_SEQ	 =$($(STAGE).PROG_PRE)
$(this).PROG_SEQ	+=$($(STAGE).PROG)
$(this).PROG_SEQ	+=$($(STAGE).PROG_POST)

$(this).ARG_PRE		 =
$(this).ARG		 =
$(this).ARG_POST	 =
$(this).ARG_SEQ		 =$($(STAGE).ARG_PRE)
$(this).ARG_SEQ		+=$($(STAGE).ARG)
$(this).ARG_SEQ		+=$($(STAGE).ARG_POST)

##############################################################################
# vim: set syntax=make:
